// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ServiceClients
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for TemperatureHistorian.
    /// </summary>
    public static partial class TemperatureHistorianExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// </param>
            /// <param name='datapointId'>
            /// </param>
            /// <param name='timestamp'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static float? AddDeviceData(this ITemperatureHistorian operations, string deviceId, string datapointId = default(string), DateTime? timestamp = default(DateTime?), double? value = default(double?))
            {
                return Task.Factory.StartNew(s => ((ITemperatureHistorian)s).AddDeviceDataAsync(deviceId, datapointId, timestamp, value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// </param>
            /// <param name='datapointId'>
            /// </param>
            /// <param name='timestamp'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<float?> AddDeviceDataAsync(this ITemperatureHistorian operations, string deviceId, string datapointId = default(string), DateTime? timestamp = default(DateTime?), double? value = default(double?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddDeviceDataWithHttpMessagesAsync(deviceId, datapointId, timestamp, value, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceType'>
            /// </param>
            /// <param name='fromTime'>
            /// </param>
            /// <param name='toTime'>
            /// </param>
            public static IList<InlineResponse200> AverageByDeviceTypeDeviceTypeGet(this ITemperatureHistorian operations, string deviceType, DateTime? fromTime = default(DateTime?), DateTime? toTime = default(DateTime?))
            {
                return Task.Factory.StartNew(s => ((ITemperatureHistorian)s).AverageByDeviceTypeDeviceTypeGetAsync(deviceType, fromTime, toTime), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceType'>
            /// </param>
            /// <param name='fromTime'>
            /// </param>
            /// <param name='toTime'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<InlineResponse200>> AverageByDeviceTypeDeviceTypeGetAsync(this ITemperatureHistorian operations, string deviceType, DateTime? fromTime = default(DateTime?), DateTime? toTime = default(DateTime?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AverageByDeviceTypeDeviceTypeGetWithHttpMessagesAsync(deviceType, fromTime, toTime, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> ApiValuesGet(this ITemperatureHistorian operations)
            {
                return Task.Factory.StartNew(s => ((ITemperatureHistorian)s).ApiValuesGetAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> ApiValuesGetAsync(this ITemperatureHistorian operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiValuesGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void ApiValuesPost(this ITemperatureHistorian operations, string value = default(string))
            {
                Task.Factory.StartNew(s => ((ITemperatureHistorian)s).ApiValuesPostAsync(value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiValuesPostAsync(this ITemperatureHistorian operations, string value = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiValuesPostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static string ApiValuesByIdGet(this ITemperatureHistorian operations, int id)
            {
                return Task.Factory.StartNew(s => ((ITemperatureHistorian)s).ApiValuesByIdGetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiValuesByIdGetAsync(this ITemperatureHistorian operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiValuesByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void ApiValuesByIdPut(this ITemperatureHistorian operations, int id, string value = default(string))
            {
                Task.Factory.StartNew(s => ((ITemperatureHistorian)s).ApiValuesByIdPutAsync(id, value), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiValuesByIdPutAsync(this ITemperatureHistorian operations, int id, string value = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiValuesByIdPutWithHttpMessagesAsync(id, value, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiValuesByIdDelete(this ITemperatureHistorian operations, int id)
            {
                Task.Factory.StartNew(s => ((ITemperatureHistorian)s).ApiValuesByIdDeleteAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiValuesByIdDeleteAsync(this ITemperatureHistorian operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiValuesByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
